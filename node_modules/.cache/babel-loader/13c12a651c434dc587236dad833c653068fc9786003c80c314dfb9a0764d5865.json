{"ast":null,"code":"// import React from \"react\";\n\nconst merge = (leftArr, rightArr) => {\n  var result = [];\n  while (leftArr.length > 0 && rightArr.length > 0) result.push(leftArr[0] < rightArr[0] ? leftArr.shift() : rightArr.shift());\n  return result.concat(leftArr.length ? leftArr : rightArr);\n};\nfunction mergeSort(arr, animations) {\n  if (arr === null) {\n    return;\n  }\n  if (arr.length === 1) {\n    return arr;\n  }\n  const midIndex = Math.floor(arr.length / 2);\n  const leftArr = MergeSort(arr.slice(0, midIndex), animations);\n  const rightArr = MergeSort(arr.slice(midIndex));\n  return merge(MergeSort(leftArr, animations), MergeSort(rightArr, animations));\n}\nexport function SortAnimations(algoName, arr) {\n  const animations = [];\n  switch (algoName) {\n    case \"Merge Sort\":\n      mergeSort(arr, animations);\n  }\n  return animations;\n}\n_c = SortAnimations;\nvar _c;\n$RefreshReg$(_c, \"SortAnimations\");","map":{"version":3,"names":["merge","leftArr","rightArr","result","length","push","shift","concat","mergeSort","arr","animations","midIndex","Math","floor","MergeSort","slice","SortAnimations","algoName","_c","$RefreshReg$"],"sources":["/Users/allisonchu/Projects/sorting-visualizer/src/utils/SortingAlgorithms.js"],"sourcesContent":["// import React from \"react\";\n\nconst merge = (leftArr, rightArr) => {\n  var result = [];\n\n  while (leftArr.length > 0 && rightArr.length > 0)\n    result.push(leftArr[0] < rightArr[0] ? leftArr.shift() : rightArr.shift());\n\n  return result.concat(leftArr.length ? leftArr : rightArr);\n};\n\nfunction mergeSort(arr, animations) {\n  if (arr === null) {\n    return;\n  }\n\n  if (arr.length === 1) {\n    return arr;\n  }\n\n  const midIndex = Math.floor(arr.length / 2);\n  const leftArr = MergeSort(arr.slice(0, midIndex), animations);\n  const rightArr = MergeSort(arr.slice(midIndex));\n\n  return merge(MergeSort(leftArr, animations), MergeSort(rightArr, animations));\n}\n\nexport function SortAnimations(algoName, arr) {\n  const animations = [];\n\n  switch (algoName) {\n    case \"Merge Sort\":\n      mergeSort(arr, animations);\n  }\n\n  return animations;\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGA,CAACC,OAAO,EAAEC,QAAQ,KAAK;EACnC,IAAIC,MAAM,GAAG,EAAE;EAEf,OAAOF,OAAO,CAACG,MAAM,GAAG,CAAC,IAAIF,QAAQ,CAACE,MAAM,GAAG,CAAC,EAC9CD,MAAM,CAACE,IAAI,CAACJ,OAAO,CAAC,CAAC,CAAC,GAAGC,QAAQ,CAAC,CAAC,CAAC,GAAGD,OAAO,CAACK,KAAK,CAAC,CAAC,GAAGJ,QAAQ,CAACI,KAAK,CAAC,CAAC,CAAC;EAE5E,OAAOH,MAAM,CAACI,MAAM,CAACN,OAAO,CAACG,MAAM,GAAGH,OAAO,GAAGC,QAAQ,CAAC;AAC3D,CAAC;AAED,SAASM,SAASA,CAACC,GAAG,EAAEC,UAAU,EAAE;EAClC,IAAID,GAAG,KAAK,IAAI,EAAE;IAChB;EACF;EAEA,IAAIA,GAAG,CAACL,MAAM,KAAK,CAAC,EAAE;IACpB,OAAOK,GAAG;EACZ;EAEA,MAAME,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACJ,GAAG,CAACL,MAAM,GAAG,CAAC,CAAC;EAC3C,MAAMH,OAAO,GAAGa,SAAS,CAACL,GAAG,CAACM,KAAK,CAAC,CAAC,EAAEJ,QAAQ,CAAC,EAAED,UAAU,CAAC;EAC7D,MAAMR,QAAQ,GAAGY,SAAS,CAACL,GAAG,CAACM,KAAK,CAACJ,QAAQ,CAAC,CAAC;EAE/C,OAAOX,KAAK,CAACc,SAAS,CAACb,OAAO,EAAES,UAAU,CAAC,EAAEI,SAAS,CAACZ,QAAQ,EAAEQ,UAAU,CAAC,CAAC;AAC/E;AAEA,OAAO,SAASM,cAAcA,CAACC,QAAQ,EAAER,GAAG,EAAE;EAC5C,MAAMC,UAAU,GAAG,EAAE;EAErB,QAAQO,QAAQ;IACd,KAAK,YAAY;MACfT,SAAS,CAACC,GAAG,EAAEC,UAAU,CAAC;EAC9B;EAEA,OAAOA,UAAU;AACnB;AAACQ,EAAA,GATeF,cAAc;AAAA,IAAAE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}