{"ast":null,"code":"// import React from \"react\";\n\nconst merge = (leftArr, rightArr) => {\n  let mergedArr = [],\n    leftIndex = 0,\n    rightIndex = 0;\n  while (leftIndex < leftArr.length && rightIndex < rightArr.length) {\n    if (leftArr[leftIndex] < rightArr[rightIndex]) {\n      mergedArr.push(leftArr[rightIndex]);\n      leftIndex++;\n    } else {\n      mergedArr.push(rightArr[rightIndex]);\n      rightIndex++;\n    }\n  }\n  return mergedArr.concat(leftArr.slice(leftIndex)).concat(rightArr.slice(rightIndex));\n};\nexport function MergeSort(arr) {\n  if (arr === null) {\n    return;\n  }\n  if (arr.length === 1) {\n    return arr;\n  }\n  const middleIndex = Math.floor(arr.length / 2);\n  const leftArr = arr.slice(0, middleIndex);\n  const rightArr = arr.slice(middleIndex);\n  return merge(MergeSort(leftArr), MergeSort(rightArr));\n}\n_c = MergeSort;\nvar _c;\n$RefreshReg$(_c, \"MergeSort\");","map":{"version":3,"names":["merge","leftArr","rightArr","mergedArr","leftIndex","rightIndex","length","push","concat","slice","MergeSort","arr","middleIndex","Math","floor","_c","$RefreshReg$"],"sources":["/Users/allisonchu/Projects/sorting-visualizer/src/utils/SortingAlgorithms.js"],"sourcesContent":["// import React from \"react\";\n\nconst merge = (leftArr, rightArr) => {\n  let mergedArr = [],\n    leftIndex = 0,\n    rightIndex = 0;\n\n  while (leftIndex < leftArr.length && rightIndex < rightArr.length) {\n    if (leftArr[leftIndex] < rightArr[rightIndex]) {\n      mergedArr.push(leftArr[rightIndex]);\n      leftIndex++;\n    } else {\n      mergedArr.push(rightArr[rightIndex]);\n      rightIndex++;\n    }\n  }\n\n  return mergedArr\n    .concat(leftArr.slice(leftIndex))\n    .concat(rightArr.slice(rightIndex));\n};\n\nexport function MergeSort(arr) {\n  if (arr === null) {\n    return;\n  }\n\n  if (arr.length === 1) {\n    return arr;\n  }\n\n  const middleIndex = Math.floor(arr.length / 2);\n  const leftArr = arr.slice(0, middleIndex);\n  const rightArr = arr.slice(middleIndex);\n\n  return merge(MergeSort(leftArr), MergeSort(rightArr));\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGA,CAACC,OAAO,EAAEC,QAAQ,KAAK;EACnC,IAAIC,SAAS,GAAG,EAAE;IAChBC,SAAS,GAAG,CAAC;IACbC,UAAU,GAAG,CAAC;EAEhB,OAAOD,SAAS,GAAGH,OAAO,CAACK,MAAM,IAAID,UAAU,GAAGH,QAAQ,CAACI,MAAM,EAAE;IACjE,IAAIL,OAAO,CAACG,SAAS,CAAC,GAAGF,QAAQ,CAACG,UAAU,CAAC,EAAE;MAC7CF,SAAS,CAACI,IAAI,CAACN,OAAO,CAACI,UAAU,CAAC,CAAC;MACnCD,SAAS,EAAE;IACb,CAAC,MAAM;MACLD,SAAS,CAACI,IAAI,CAACL,QAAQ,CAACG,UAAU,CAAC,CAAC;MACpCA,UAAU,EAAE;IACd;EACF;EAEA,OAAOF,SAAS,CACbK,MAAM,CAACP,OAAO,CAACQ,KAAK,CAACL,SAAS,CAAC,CAAC,CAChCI,MAAM,CAACN,QAAQ,CAACO,KAAK,CAACJ,UAAU,CAAC,CAAC;AACvC,CAAC;AAED,OAAO,SAASK,SAASA,CAACC,GAAG,EAAE;EAC7B,IAAIA,GAAG,KAAK,IAAI,EAAE;IAChB;EACF;EAEA,IAAIA,GAAG,CAACL,MAAM,KAAK,CAAC,EAAE;IACpB,OAAOK,GAAG;EACZ;EAEA,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACH,GAAG,CAACL,MAAM,GAAG,CAAC,CAAC;EAC9C,MAAML,OAAO,GAAGU,GAAG,CAACF,KAAK,CAAC,CAAC,EAAEG,WAAW,CAAC;EACzC,MAAMV,QAAQ,GAAGS,GAAG,CAACF,KAAK,CAACG,WAAW,CAAC;EAEvC,OAAOZ,KAAK,CAACU,SAAS,CAACT,OAAO,CAAC,EAAES,SAAS,CAACR,QAAQ,CAAC,CAAC;AACvD;AAACa,EAAA,GAdeL,SAAS;AAAA,IAAAK,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}