{"ast":null,"code":"// import React from \"react\";\nexport function SortAnimations(algoName,arr){const animations=[];const tempArray=arr.slice();const sortObj={animations:null,sortedArray:null};switch(algoName){case\"Merge Sort\":mergeSortAnimationsHelper(arr,0,arr.length-1,tempArray,animations);return{sortedArray:mergeSort(arr),animations:animations};case\"Quick Sort\":// return {\n//   sortedArray: quickSort(arr, animations),\n//   animations: animations,\n// };\ncase\"Heap Sort\":case\"Bubble Sort\":default:sortObj.sortedArray=null;sortObj.animations=null;}return sortObj;}// Merge Sort Functions\nconst merge=(leftArr,rightArr)=>{var result=[];while(leftArr.length>0&&rightArr.length>0)result.push(leftArr[0]<rightArr[0]?leftArr.shift():rightArr.shift());return result.concat(leftArr.length?leftArr:rightArr);};function mergeSort(arr,animations){if(arr===null){return;}if(arr.length===1){return arr;}const midIndex=Math.floor(arr.length/2);const leftArr=mergeSort(arr.slice(0,midIndex),animations);const rightArr=mergeSort(arr.slice(midIndex),animations);return merge(mergeSort(leftArr,animations),mergeSort(rightArr,animations));}// Merge Sort Animation Functions\nfunction mergeSortAnimationsHelper(arr,startIdx,endIdx,tempArray,animations){if(startIdx===endIdx)return;const middleIdx=Math.floor((startIdx+endIdx)/2);mergeSortAnimationsHelper(tempArray,startIdx,middleIdx,arr,animations);mergeSortAnimationsHelper(tempArray,middleIdx+1,endIdx,arr,animations);doMerge(arr,startIdx,middleIdx,endIdx,tempArray,animations);}function doMerge(arr,startIdx,middleIdx,endIdx,tempArray,animations){let k=startIdx;let i=startIdx;let j=middleIdx+1;while(i<=middleIdx&&j<=endIdx){animations.push([i,j]);animations.push([i,j]);if(tempArray[i]<=tempArray[j]){animations.push([k,tempArray[i]]);arr[k++]=tempArray[i++];}else{animations.push([k,tempArray[j]]);arr[k++]=tempArray[j++];}}while(i<=middleIdx){animations.push([i,i]);animations.push([i,i]);animations.push([k,tempArray[i]]);arr[k++]=tempArray[i++];}while(j<=endIdx){animations.push([j,j]);animations.push([j,j]);animations.push([k,tempArray[j]]);arr[k++]=tempArray[j++];}}// Quick Sort Functions\nfunction quickSort(arr,animations){// terminate execution and return array if empty\n// or containing one elemrnt\nif(arr.length<=1)return arr;// set the pivot to the last item on the list\nconst pivot=arr[arr.length-1];// create temporary contaners\nconst leftArr=[];const rightArr=[];const tempArr=arr.slice(0,arr.length-1);// loop through the array to put the pivot in its sorted position\nfor(let i=0;i<tempArr.length;i++){animations.push([i,i]);if(tempArr[i]>pivot){rightArr.push(tempArr[i]);animations.push([i,rightArr.findIndex(x=>x===tempArr[i])]);}else{leftArr.push(tempArr[i]);animations.push([i,leftArr.findIndex(x=>x===tempArr[i])]);}}// repeat same processes above on both partition\n// until every item is at its sorted position\nreturn[...quickSort(leftArr,animations),pivot,...quickSort(rightArr,animations)];}","map":{"version":3,"names":["SortAnimations","algoName","arr","animations","tempArray","slice","sortObj","sortedArray","mergeSortAnimationsHelper","length","mergeSort","merge","leftArr","rightArr","result","push","shift","concat","midIndex","Math","floor","startIdx","endIdx","middleIdx","doMerge","k","i","j","quickSort","pivot","tempArr","findIndex","x"],"sources":["/Users/allisonchu/Projects/sorting-visualizer/src/utils/SortingAlgorithms.js"],"sourcesContent":["// import React from \"react\";\n\nexport function SortAnimations(algoName, arr) {\n  const animations = [];\n  const tempArray = arr.slice();\n  const sortObj = {\n    animations: null,\n    sortedArray: null,\n  };\n\n  switch (algoName) {\n    case \"Merge Sort\":\n      mergeSortAnimationsHelper(arr, 0, arr.length - 1, tempArray, animations);\n      return { sortedArray: mergeSort(arr), animations: animations };\n    case \"Quick Sort\":\n    // return {\n    //   sortedArray: quickSort(arr, animations),\n    //   animations: animations,\n    // };\n    case \"Heap Sort\":\n    case \"Bubble Sort\":\n    default:\n      sortObj.sortedArray = null;\n      sortObj.animations = null;\n  }\n\n  return sortObj;\n}\n\n// Merge Sort Functions\nconst merge = (leftArr, rightArr) => {\n  var result = [];\n\n  while (leftArr.length > 0 && rightArr.length > 0)\n    result.push(leftArr[0] < rightArr[0] ? leftArr.shift() : rightArr.shift());\n\n  return result.concat(leftArr.length ? leftArr : rightArr);\n};\n\nfunction mergeSort(arr, animations) {\n  if (arr === null) {\n    return;\n  }\n\n  if (arr.length === 1) {\n    return arr;\n  }\n\n  const midIndex = Math.floor(arr.length / 2);\n  const leftArr = mergeSort(arr.slice(0, midIndex), animations);\n  const rightArr = mergeSort(arr.slice(midIndex), animations);\n\n  return merge(mergeSort(leftArr, animations), mergeSort(rightArr, animations));\n}\n\n// Merge Sort Animation Functions\nfunction mergeSortAnimationsHelper(\n  arr,\n  startIdx,\n  endIdx,\n  tempArray,\n  animations\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortAnimationsHelper(tempArray, startIdx, middleIdx, arr, animations);\n  mergeSortAnimationsHelper(tempArray, middleIdx + 1, endIdx, arr, animations);\n  doMerge(arr, startIdx, middleIdx, endIdx, tempArray, animations);\n}\n\nfunction doMerge(arr, startIdx, middleIdx, endIdx, tempArray, animations) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    animations.push([i, j]);\n    animations.push([i, j]);\n    if (tempArray[i] <= tempArray[j]) {\n      animations.push([k, tempArray[i]]);\n      arr[k++] = tempArray[i++];\n    } else {\n      animations.push([k, tempArray[j]]);\n      arr[k++] = tempArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    animations.push([i, i]);\n    animations.push([i, i]);\n    animations.push([k, tempArray[i]]);\n    arr[k++] = tempArray[i++];\n  }\n  while (j <= endIdx) {\n    animations.push([j, j]);\n    animations.push([j, j]);\n    animations.push([k, tempArray[j]]);\n    arr[k++] = tempArray[j++];\n  }\n}\n\n// Quick Sort Functions\nfunction quickSort(arr, animations) {\n  // terminate execution and return array if empty\n  // or containing one elemrnt\n  if (arr.length <= 1) return arr;\n\n  // set the pivot to the last item on the list\n  const pivot = arr[arr.length - 1];\n\n  // create temporary contaners\n  const leftArr = [];\n  const rightArr = [];\n\n  const tempArr = arr.slice(0, arr.length - 1);\n\n  // loop through the array to put the pivot in its sorted position\n  for (let i = 0; i < tempArr.length; i++) {\n    animations.push([i, i]);\n    if (tempArr[i] > pivot) {\n      rightArr.push(tempArr[i]);\n      animations.push([i, rightArr.findIndex((x) => x === tempArr[i])]);\n    } else {\n      leftArr.push(tempArr[i]);\n      animations.push([i, leftArr.findIndex((x) => x === tempArr[i])]);\n    }\n  }\n\n  // repeat same processes above on both partition\n  // until every item is at its sorted position\n  return [\n    ...quickSort(leftArr, animations),\n    pivot,\n    ...quickSort(rightArr, animations),\n  ];\n}\n"],"mappings":"AAAA;AAEA,MAAO,SAAS,CAAAA,cAAcA,CAACC,QAAQ,CAAEC,GAAG,CAAE,CAC5C,KAAM,CAAAC,UAAU,CAAG,EAAE,CACrB,KAAM,CAAAC,SAAS,CAAGF,GAAG,CAACG,KAAK,CAAC,CAAC,CAC7B,KAAM,CAAAC,OAAO,CAAG,CACdH,UAAU,CAAE,IAAI,CAChBI,WAAW,CAAE,IACf,CAAC,CAED,OAAQN,QAAQ,EACd,IAAK,YAAY,CACfO,yBAAyB,CAACN,GAAG,CAAE,CAAC,CAAEA,GAAG,CAACO,MAAM,CAAG,CAAC,CAAEL,SAAS,CAAED,UAAU,CAAC,CACxE,MAAO,CAAEI,WAAW,CAAEG,SAAS,CAACR,GAAG,CAAC,CAAEC,UAAU,CAAEA,UAAW,CAAC,CAChE,IAAK,YAAY,CACjB;AACA;AACA;AACA;AACA,IAAK,WAAW,CAChB,IAAK,aAAa,CAClB,QACEG,OAAO,CAACC,WAAW,CAAG,IAAI,CAC1BD,OAAO,CAACH,UAAU,CAAG,IAAI,CAC7B,CAEA,MAAO,CAAAG,OAAO,CAChB,CAEA;AACA,KAAM,CAAAK,KAAK,CAAGA,CAACC,OAAO,CAAEC,QAAQ,GAAK,CACnC,GAAI,CAAAC,MAAM,CAAG,EAAE,CAEf,MAAOF,OAAO,CAACH,MAAM,CAAG,CAAC,EAAII,QAAQ,CAACJ,MAAM,CAAG,CAAC,CAC9CK,MAAM,CAACC,IAAI,CAACH,OAAO,CAAC,CAAC,CAAC,CAAGC,QAAQ,CAAC,CAAC,CAAC,CAAGD,OAAO,CAACI,KAAK,CAAC,CAAC,CAAGH,QAAQ,CAACG,KAAK,CAAC,CAAC,CAAC,CAE5E,MAAO,CAAAF,MAAM,CAACG,MAAM,CAACL,OAAO,CAACH,MAAM,CAAGG,OAAO,CAAGC,QAAQ,CAAC,CAC3D,CAAC,CAED,QAAS,CAAAH,SAASA,CAACR,GAAG,CAAEC,UAAU,CAAE,CAClC,GAAID,GAAG,GAAK,IAAI,CAAE,CAChB,OACF,CAEA,GAAIA,GAAG,CAACO,MAAM,GAAK,CAAC,CAAE,CACpB,MAAO,CAAAP,GAAG,CACZ,CAEA,KAAM,CAAAgB,QAAQ,CAAGC,IAAI,CAACC,KAAK,CAAClB,GAAG,CAACO,MAAM,CAAG,CAAC,CAAC,CAC3C,KAAM,CAAAG,OAAO,CAAGF,SAAS,CAACR,GAAG,CAACG,KAAK,CAAC,CAAC,CAAEa,QAAQ,CAAC,CAAEf,UAAU,CAAC,CAC7D,KAAM,CAAAU,QAAQ,CAAGH,SAAS,CAACR,GAAG,CAACG,KAAK,CAACa,QAAQ,CAAC,CAAEf,UAAU,CAAC,CAE3D,MAAO,CAAAQ,KAAK,CAACD,SAAS,CAACE,OAAO,CAAET,UAAU,CAAC,CAAEO,SAAS,CAACG,QAAQ,CAAEV,UAAU,CAAC,CAAC,CAC/E,CAEA;AACA,QAAS,CAAAK,yBAAyBA,CAChCN,GAAG,CACHmB,QAAQ,CACRC,MAAM,CACNlB,SAAS,CACTD,UAAU,CACV,CACA,GAAIkB,QAAQ,GAAKC,MAAM,CAAE,OACzB,KAAM,CAAAC,SAAS,CAAGJ,IAAI,CAACC,KAAK,CAAC,CAACC,QAAQ,CAAGC,MAAM,EAAI,CAAC,CAAC,CACrDd,yBAAyB,CAACJ,SAAS,CAAEiB,QAAQ,CAAEE,SAAS,CAAErB,GAAG,CAAEC,UAAU,CAAC,CAC1EK,yBAAyB,CAACJ,SAAS,CAAEmB,SAAS,CAAG,CAAC,CAAED,MAAM,CAAEpB,GAAG,CAAEC,UAAU,CAAC,CAC5EqB,OAAO,CAACtB,GAAG,CAAEmB,QAAQ,CAAEE,SAAS,CAAED,MAAM,CAAElB,SAAS,CAAED,UAAU,CAAC,CAClE,CAEA,QAAS,CAAAqB,OAAOA,CAACtB,GAAG,CAAEmB,QAAQ,CAAEE,SAAS,CAAED,MAAM,CAAElB,SAAS,CAAED,UAAU,CAAE,CACxE,GAAI,CAAAsB,CAAC,CAAGJ,QAAQ,CAChB,GAAI,CAAAK,CAAC,CAAGL,QAAQ,CAChB,GAAI,CAAAM,CAAC,CAAGJ,SAAS,CAAG,CAAC,CACrB,MAAOG,CAAC,EAAIH,SAAS,EAAII,CAAC,EAAIL,MAAM,CAAE,CACpCnB,UAAU,CAACY,IAAI,CAAC,CAACW,CAAC,CAAEC,CAAC,CAAC,CAAC,CACvBxB,UAAU,CAACY,IAAI,CAAC,CAACW,CAAC,CAAEC,CAAC,CAAC,CAAC,CACvB,GAAIvB,SAAS,CAACsB,CAAC,CAAC,EAAItB,SAAS,CAACuB,CAAC,CAAC,CAAE,CAChCxB,UAAU,CAACY,IAAI,CAAC,CAACU,CAAC,CAAErB,SAAS,CAACsB,CAAC,CAAC,CAAC,CAAC,CAClCxB,GAAG,CAACuB,CAAC,EAAE,CAAC,CAAGrB,SAAS,CAACsB,CAAC,EAAE,CAAC,CAC3B,CAAC,IAAM,CACLvB,UAAU,CAACY,IAAI,CAAC,CAACU,CAAC,CAAErB,SAAS,CAACuB,CAAC,CAAC,CAAC,CAAC,CAClCzB,GAAG,CAACuB,CAAC,EAAE,CAAC,CAAGrB,SAAS,CAACuB,CAAC,EAAE,CAAC,CAC3B,CACF,CACA,MAAOD,CAAC,EAAIH,SAAS,CAAE,CACrBpB,UAAU,CAACY,IAAI,CAAC,CAACW,CAAC,CAAEA,CAAC,CAAC,CAAC,CACvBvB,UAAU,CAACY,IAAI,CAAC,CAACW,CAAC,CAAEA,CAAC,CAAC,CAAC,CACvBvB,UAAU,CAACY,IAAI,CAAC,CAACU,CAAC,CAAErB,SAAS,CAACsB,CAAC,CAAC,CAAC,CAAC,CAClCxB,GAAG,CAACuB,CAAC,EAAE,CAAC,CAAGrB,SAAS,CAACsB,CAAC,EAAE,CAAC,CAC3B,CACA,MAAOC,CAAC,EAAIL,MAAM,CAAE,CAClBnB,UAAU,CAACY,IAAI,CAAC,CAACY,CAAC,CAAEA,CAAC,CAAC,CAAC,CACvBxB,UAAU,CAACY,IAAI,CAAC,CAACY,CAAC,CAAEA,CAAC,CAAC,CAAC,CACvBxB,UAAU,CAACY,IAAI,CAAC,CAACU,CAAC,CAAErB,SAAS,CAACuB,CAAC,CAAC,CAAC,CAAC,CAClCzB,GAAG,CAACuB,CAAC,EAAE,CAAC,CAAGrB,SAAS,CAACuB,CAAC,EAAE,CAAC,CAC3B,CACF,CAEA;AACA,QAAS,CAAAC,SAASA,CAAC1B,GAAG,CAAEC,UAAU,CAAE,CAClC;AACA;AACA,GAAID,GAAG,CAACO,MAAM,EAAI,CAAC,CAAE,MAAO,CAAAP,GAAG,CAE/B;AACA,KAAM,CAAA2B,KAAK,CAAG3B,GAAG,CAACA,GAAG,CAACO,MAAM,CAAG,CAAC,CAAC,CAEjC;AACA,KAAM,CAAAG,OAAO,CAAG,EAAE,CAClB,KAAM,CAAAC,QAAQ,CAAG,EAAE,CAEnB,KAAM,CAAAiB,OAAO,CAAG5B,GAAG,CAACG,KAAK,CAAC,CAAC,CAAEH,GAAG,CAACO,MAAM,CAAG,CAAC,CAAC,CAE5C;AACA,IAAK,GAAI,CAAAiB,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGI,OAAO,CAACrB,MAAM,CAAEiB,CAAC,EAAE,CAAE,CACvCvB,UAAU,CAACY,IAAI,CAAC,CAACW,CAAC,CAAEA,CAAC,CAAC,CAAC,CACvB,GAAII,OAAO,CAACJ,CAAC,CAAC,CAAGG,KAAK,CAAE,CACtBhB,QAAQ,CAACE,IAAI,CAACe,OAAO,CAACJ,CAAC,CAAC,CAAC,CACzBvB,UAAU,CAACY,IAAI,CAAC,CAACW,CAAC,CAAEb,QAAQ,CAACkB,SAAS,CAAEC,CAAC,EAAKA,CAAC,GAAKF,OAAO,CAACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CACnE,CAAC,IAAM,CACLd,OAAO,CAACG,IAAI,CAACe,OAAO,CAACJ,CAAC,CAAC,CAAC,CACxBvB,UAAU,CAACY,IAAI,CAAC,CAACW,CAAC,CAAEd,OAAO,CAACmB,SAAS,CAAEC,CAAC,EAAKA,CAAC,GAAKF,OAAO,CAACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAClE,CACF,CAEA;AACA;AACA,MAAO,CACL,GAAGE,SAAS,CAAChB,OAAO,CAAET,UAAU,CAAC,CACjC0B,KAAK,CACL,GAAGD,SAAS,CAACf,QAAQ,CAAEV,UAAU,CAAC,CACnC,CACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}